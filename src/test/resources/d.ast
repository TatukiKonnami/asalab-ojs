TranslationUnitDecl 0x7fc47a020cd0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fc47a021220 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fc47a020f40 '__int128'
|-TypedefDecl 0x7fc47a021290 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fc47a020f60 'unsigned __int128'
|-TypedefDecl 0x7fc47a021568 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fc47a021370 'struct __NSConstantString_tag'
|   `-Record 0x7fc47a0212e8 '__NSConstantString_tag'
|-TypedefDecl 0x7fc47a021600 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fc47a0215c0 'char *'
|   `-BuiltinType 0x7fc47a020d60 'char'
|-TypedefDecl 0x7fc47a0218c8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fc47a021870 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fc47a0216e0 'struct __va_list_tag'
|     `-Record 0x7fc47a021658 '__va_list_tag'
|-FunctionDecl 0x7fc479002b70 <d.c:3:1, line:12:1> line:3:6 used disp 'void (int, int *)'
| |-ParmVarDecl 0x7fc47a021938 <col:11, col:15> col:15 used n 'int'
| |-ParmVarDecl 0x7fc479002a60 <col:18, col:24> col:22 used x 'int *':'int *'
| `-CompoundStmt 0x7fc479003528 <line:4:1, line:12:1>
|   |-DeclStmt 0x7fc479002cd0 <line:5:5, col:10>
|   | `-VarDecl 0x7fc479002c70 <col:5, col:9> col:9 used i 'int'
|   |-ForStmt 0x7fc479003420 <line:6:5, line:10:5>
|   | |-BinaryOperator 0x7fc479002d30 <line:6:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fc479002ce8 <col:9> 'int' lvalue Var 0x7fc479002c70 'i' 'int'
|   | | `-IntegerLiteral 0x7fc479002d10 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fc479002dd8 <col:13, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fc479002da8 <col:13> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fc479002d58 <col:13> 'int' lvalue Var 0x7fc479002c70 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fc479002dc0 <col:15> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fc479002d80 <col:15> 'int' lvalue ParmVar 0x7fc47a021938 'n' 'int'
|   | |-UnaryOperator 0x7fc479002e28 <col:17, col:18> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fc479002e00 <col:17> 'int' lvalue ParmVar 0x7fc47a021938 'n' 'int'
|   | `-CompoundStmt 0x7fc4790033f8 <col:21, line:10:5>
|   |   |-CallExpr 0x7fc479003160 <line:7:9, col:27> 'int'
|   |   | |-ImplicitCastExpr 0x7fc479003148 <col:9> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fc479002fe0 <col:9> 'int (const char *, ...)' Function 0x7fc479002e88 'printf' 'int (const char *, ...)'
|   |   | |-ImplicitCastExpr 0x7fc4790031b0 <col:16> 'const char *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x7fc479003198 <col:16> 'char *' <ArrayToPointerDecay>
|   |   | |   `-StringLiteral 0x7fc479003048 <col:16> 'char [4]' lvalue "%d "
|   |   | `-ImplicitCastExpr 0x7fc4790031c8 <col:23, col:26> 'int' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x7fc4790030f8 <col:23, col:26> 'int' lvalue
|   |   |     |-ImplicitCastExpr 0x7fc4790030c8 <col:23> 'int *':'int *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fc479003078 <col:23> 'int *':'int *' lvalue ParmVar 0x7fc479002a60 'x' 'int *':'int *'
|   |   |     `-ImplicitCastExpr 0x7fc4790030e0 <col:25> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fc4790030a0 <col:25> 'int' lvalue Var 0x7fc479002c70 'i' 'int'
|   |   `-IfStmt 0x7fc4790033c0 <line:8:9, line:9:24>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fc479003288 <line:8:12, col:18> 'int' '=='
|   |     | |-BinaryOperator 0x7fc479003240 <col:12, col:14> 'int' '%'
|   |     | | |-ImplicitCastExpr 0x7fc479003228 <col:12> 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x7fc4790031e0 <col:12> 'int' lvalue Var 0x7fc479002c70 'i' 'int'
|   |     | | `-IntegerLiteral 0x7fc479003208 <col:14> 'int' 10
|   |     | `-IntegerLiteral 0x7fc479003268 <col:18> 'int' 9
|   |     |-CallExpr 0x7fc479003360 <line:9:13, col:24> 'int'
|   |     | |-ImplicitCastExpr 0x7fc479003348 <col:13> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x7fc4790032b0 <col:13> 'int (const char *, ...)' Function 0x7fc479002e88 'printf' 'int (const char *, ...)'
|   |     | `-ImplicitCastExpr 0x7fc4790033a8 <col:20> 'const char *' <BitCast>
|   |     |   `-ImplicitCastExpr 0x7fc479003390 <col:20> 'char *' <ArrayToPointerDecay>
|   |     |     `-StringLiteral 0x7fc479003318 <col:20> 'char [2]' lvalue "\n"
|   |     `-<<<NULL>>>
|   `-CallExpr 0x7fc4790034c8 <line:11:5, col:16> 'int'
|     |-ImplicitCastExpr 0x7fc4790034b0 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fc479003458 <col:5> 'int (const char *, ...)' Function 0x7fc479002e88 'printf' 'int (const char *, ...)'
|     `-ImplicitCastExpr 0x7fc479003510 <col:12> 'const char *' <BitCast>
|       `-ImplicitCastExpr 0x7fc4790034f8 <col:12> 'char *' <ArrayToPointerDecay>
|         `-StringLiteral 0x7fc479003480 <col:12> 'char [2]' lvalue "\n"
|-FunctionDecl 0x7fc479002e88 <line:7:9> col:9 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x7fc479002f20 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x7fc479002f88 <col:9> Implicit printf 1 2
|-FunctionDecl 0x7fc479003720 <line:14:1, line:20:1> line:14:6 used swap 'void (int *, int *)'
| |-ParmVarDecl 0x7fc479003580 <col:11, col:17> col:15 used x 'int *':'int *'
| |-ParmVarDecl 0x7fc479003608 <col:20, col:26> col:24 used y 'int *':'int *'
| `-CompoundStmt 0x7fc479004af0 <line:15:1, line:20:1>
|   |-DeclStmt 0x7fc479003840 <line:16:5, col:11>
|   | `-VarDecl 0x7fc4790037e0 <col:5, col:9> col:9 used wk 'int'
|   |-BinaryOperator 0x7fc4790038f8 <line:17:5, col:9> 'int' '='
|   | |-DeclRefExpr 0x7fc479003858 <col:5> 'int' lvalue Var 0x7fc4790037e0 'wk' 'int'
|   | `-ImplicitCastExpr 0x7fc4790038e0 <col:8, col:9> 'int' <LValueToRValue>
|   |   `-UnaryOperator 0x7fc4790038c0 <col:8, col:9> 'int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fc4790038a8 <col:9> 'int *':'int *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fc479003880 <col:9> 'int *':'int *' lvalue ParmVar 0x7fc479003580 'x' 'int *':'int *'
|   |-BinaryOperator 0x7fc479004a00 <line:18:5, col:9> 'int' '='
|   | |-UnaryOperator 0x7fc479003960 <col:5, col:6> 'int' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fc479003948 <col:6> 'int *':'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fc479003920 <col:6> 'int *':'int *' lvalue ParmVar 0x7fc479003580 'x' 'int *':'int *'
|   | `-ImplicitCastExpr 0x7fc4790039e0 <col:8, col:9> 'int' <LValueToRValue>
|   |   `-UnaryOperator 0x7fc4790039c0 <col:8, col:9> 'int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fc4790039a8 <col:9> 'int *':'int *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fc479003980 <col:9> 'int *':'int *' lvalue ParmVar 0x7fc479003608 'y' 'int *':'int *'
|   `-BinaryOperator 0x7fc479004ac8 <line:19:5, col:8> 'int' '='
|     |-UnaryOperator 0x7fc479004a68 <col:5, col:6> 'int' lvalue prefix '*'
|     | `-ImplicitCastExpr 0x7fc479004a50 <col:6> 'int *':'int *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc479004a28 <col:6> 'int *':'int *' lvalue ParmVar 0x7fc479003608 'y' 'int *':'int *'
|     `-ImplicitCastExpr 0x7fc479004ab0 <col:8> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fc479004a88 <col:8> 'int' lvalue Var 0x7fc4790037e0 'wk' 'int'
|-FunctionDecl 0x7fc479004d70 <line:22:1, line:38:1> line:22:6 used quicksort 'void (int, int, int *)'
| |-ParmVarDecl 0x7fc479004b40 <col:16, col:20> col:20 used first 'int'
| |-ParmVarDecl 0x7fc479004bb8 <col:27, col:31> col:31 used last 'int'
| |-ParmVarDecl 0x7fc479004c40 <col:37, col:43> col:41 used x 'int *':'int *'
| `-CompoundStmt 0x7fc479005e38 <line:23:1, line:38:1>
|   |-DeclStmt 0x7fc479004fa8 <line:24:5, col:20>
|   | |-VarDecl 0x7fc479004e38 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x7fc479004eb0 <col:5, col:12> col:12 used j 'int'
|   | `-VarDecl 0x7fc479004f28 <col:5, col:15> col:15 used pivot 'int'
|   `-IfStmt 0x7fc479005e00 <line:25:5, line:37:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fc479005040 <line:25:8, col:14> 'int' '<'
|     | |-ImplicitCastExpr 0x7fc479005010 <col:8> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fc479004fc0 <col:8> 'int' lvalue ParmVar 0x7fc479004b40 'first' 'int'
|     | `-ImplicitCastExpr 0x7fc479005028 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fc479004fe8 <col:14> 'int' lvalue ParmVar 0x7fc479004bb8 'last' 'int'
|     |-CompoundStmt 0x7fc479005db8 <col:19, line:37:5>
|     | |-BinaryOperator 0x7fc479005220 <line:26:9, col:31> 'int' '='
|     | | |-DeclRefExpr 0x7fc479005068 <col:9> 'int' lvalue Var 0x7fc479004f28 'pivot' 'int'
|     | | `-ImplicitCastExpr 0x7fc479005208 <col:15, col:31> 'int' <LValueToRValue>
|     | |   `-ArraySubscriptExpr 0x7fc4790051e0 <col:15, col:31> 'int' lvalue
|     | |     |-ImplicitCastExpr 0x7fc4790051c8 <col:15> 'int *':'int *' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x7fc479005090 <col:15> 'int *':'int *' lvalue ParmVar 0x7fc479004c40 'x' 'int *':'int *'
|     | |     `-BinaryOperator 0x7fc4790051a0 <col:17, col:30> 'int' '/'
|     | |       |-ParenExpr 0x7fc479005160 <col:17, col:28> 'int'
|     | |       | `-BinaryOperator 0x7fc479005138 <col:18, col:24> 'int' '+'
|     | |       |   |-ImplicitCastExpr 0x7fc479005108 <col:18> 'int' <LValueToRValue>
|     | |       |   | `-DeclRefExpr 0x7fc4790050b8 <col:18> 'int' lvalue ParmVar 0x7fc479004b40 'first' 'int'
|     | |       |   `-ImplicitCastExpr 0x7fc479005120 <col:24> 'int' <LValueToRValue>
|     | |       |     `-DeclRefExpr 0x7fc4790050e0 <col:24> 'int' lvalue ParmVar 0x7fc479004bb8 'last' 'int'
|     | |       `-IntegerLiteral 0x7fc479005180 <col:30> 'int' 2
|     | |-BinaryOperator 0x7fc4790052b0 <line:27:9, col:11> 'int' '='
|     | | |-DeclRefExpr 0x7fc479005248 <col:9> 'int' lvalue Var 0x7fc479004e38 'i' 'int'
|     | | `-ImplicitCastExpr 0x7fc479005298 <col:11> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fc479005270 <col:11> 'int' lvalue ParmVar 0x7fc479004b40 'first' 'int'
|     | |-BinaryOperator 0x7fc479005340 <line:28:9, col:11> 'int' '='
|     | | |-DeclRefExpr 0x7fc4790052d8 <col:9> 'int' lvalue Var 0x7fc479004eb0 'j' 'int'
|     | | `-ImplicitCastExpr 0x7fc479005328 <col:11> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fc479005300 <col:11> 'int' lvalue ParmVar 0x7fc479004bb8 'last' 'int'
|     | |-WhileStmt 0x7fc479005ab8 <line:29:9, line:33:9>
|     | | |-<<<NULL>>>
|     | | |-BinaryOperator 0x7fc4790053e8 <line:29:15, col:18> 'int' '<='
|     | | | |-ImplicitCastExpr 0x7fc4790053b8 <col:15> 'int' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x7fc479005368 <col:15> 'int' lvalue Var 0x7fc479004e38 'i' 'int'
|     | | | `-ImplicitCastExpr 0x7fc4790053d0 <col:18> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x7fc479005390 <col:18> 'int' lvalue Var 0x7fc479004eb0 'j' 'int'
|     | | `-CompoundStmt 0x7fc479005a88 <col:20, line:33:9>
|     | |   |-WhileStmt 0x7fc479005580 <line:30:13, col:32>
|     | |   | |-<<<NULL>>>
|     | |   | |-BinaryOperator 0x7fc479005510 <col:19, col:24> 'int' '<'
|     | |   | | |-ImplicitCastExpr 0x7fc4790054e0 <col:19, col:22> 'int' <LValueToRValue>
|     | |   | | | `-ArraySubscriptExpr 0x7fc479005490 <col:19, col:22> 'int' lvalue
|     | |   | | |   |-ImplicitCastExpr 0x7fc479005460 <col:19> 'int *':'int *' <LValueToRValue>
|     | |   | | |   | `-DeclRefExpr 0x7fc479005410 <col:19> 'int *':'int *' lvalue ParmVar 0x7fc479004c40 'x' 'int *':'int *'
|     | |   | | |   `-ImplicitCastExpr 0x7fc479005478 <col:21> 'int' <LValueToRValue>
|     | |   | | |     `-DeclRefExpr 0x7fc479005438 <col:21> 'int' lvalue Var 0x7fc479004e38 'i' 'int'
|     | |   | | `-ImplicitCastExpr 0x7fc4790054f8 <col:24> 'int' <LValueToRValue>
|     | |   | |   `-DeclRefExpr 0x7fc4790054b8 <col:24> 'int' lvalue Var 0x7fc479004f28 'pivot' 'int'
|     | |   | `-UnaryOperator 0x7fc479005560 <col:31, col:32> 'int' postfix '++'
|     | |   |   `-DeclRefExpr 0x7fc479005538 <col:31> 'int' lvalue Var 0x7fc479004e38 'i' 'int'
|     | |   |-WhileStmt 0x7fc479005710 <line:31:13, col:32>
|     | |   | |-<<<NULL>>>
|     | |   | |-BinaryOperator 0x7fc4790056a0 <col:19, col:24> 'int' '>'
|     | |   | | |-ImplicitCastExpr 0x7fc479005670 <col:19, col:22> 'int' <LValueToRValue>
|     | |   | | | `-ArraySubscriptExpr 0x7fc479005620 <col:19, col:22> 'int' lvalue
|     | |   | | |   |-ImplicitCastExpr 0x7fc4790055f0 <col:19> 'int *':'int *' <LValueToRValue>
|     | |   | | |   | `-DeclRefExpr 0x7fc4790055a0 <col:19> 'int *':'int *' lvalue ParmVar 0x7fc479004c40 'x' 'int *':'int *'
|     | |   | | |   `-ImplicitCastExpr 0x7fc479005608 <col:21> 'int' <LValueToRValue>
|     | |   | | |     `-DeclRefExpr 0x7fc4790055c8 <col:21> 'int' lvalue Var 0x7fc479004eb0 'j' 'int'
|     | |   | | `-ImplicitCastExpr 0x7fc479005688 <col:24> 'int' <LValueToRValue>
|     | |   | |   `-DeclRefExpr 0x7fc479005648 <col:24> 'int' lvalue Var 0x7fc479004f28 'pivot' 'int'
|     | |   | `-UnaryOperator 0x7fc4790056f0 <col:31, col:32> 'int' postfix '--'
|     | |   |   `-DeclRefExpr 0x7fc4790056c8 <col:31> 'int' lvalue Var 0x7fc479004eb0 'j' 'int'
|     | |   `-IfStmt 0x7fc479005a50 <line:32:13, col:42>
|     | |     |-<<<NULL>>>
|     | |     |-<<<NULL>>>
|     | |     |-BinaryOperator 0x7fc4790057b0 <col:16, col:19> 'int' '<='
|     | |     | |-ImplicitCastExpr 0x7fc479005780 <col:16> 'int' <LValueToRValue>
|     | |     | | `-DeclRefExpr 0x7fc479005730 <col:16> 'int' lvalue Var 0x7fc479004e38 'i' 'int'
|     | |     | `-ImplicitCastExpr 0x7fc479005798 <col:19> 'int' <LValueToRValue>
|     | |     |   `-DeclRefExpr 0x7fc479005758 <col:19> 'int' lvalue Var 0x7fc479004eb0 'j' 'int'
|     | |     |-CallExpr 0x7fc479005a18 <col:22, col:42> 'void'
|     | |     | |-ImplicitCastExpr 0x7fc479005a00 <col:22> 'void (*)(int *, int *)' <FunctionToPointerDecay>
|     | |     | | `-DeclRefExpr 0x7fc4790057d8 <col:22> 'void (int *, int *)' Function 0x7fc479003720 'swap' 'void (int *, int *)'
|     | |     | |-UnaryOperator 0x7fc4790058b0 <col:27, col:33> 'int *' prefix '&'
|     | |     | | `-ArraySubscriptExpr 0x7fc479005888 <col:28, col:33> 'int' lvalue
|     | |     | |   |-ImplicitCastExpr 0x7fc479005870 <col:28> 'int *':'int *' <LValueToRValue>
|     | |     | |   | `-DeclRefExpr 0x7fc479005800 <col:28> 'int *':'int *' lvalue ParmVar 0x7fc479004c40 'x' 'int *':'int *'
|     | |     | |   `-UnaryOperator 0x7fc479005850 <col:30, col:31> 'int' postfix '++'
|     | |     | |     `-DeclRefExpr 0x7fc479005828 <col:30> 'int' lvalue Var 0x7fc479004e38 'i' 'int'
|     | |     | `-UnaryOperator 0x7fc479005980 <col:35, col:41> 'int *' prefix '&'
|     | |     |   `-ArraySubscriptExpr 0x7fc479005958 <col:36, col:41> 'int' lvalue
|     | |     |     |-ImplicitCastExpr 0x7fc479005940 <col:36> 'int *':'int *' <LValueToRValue>
|     | |     |     | `-DeclRefExpr 0x7fc4790058d0 <col:36> 'int *':'int *' lvalue ParmVar 0x7fc479004c40 'x' 'int *':'int *'
|     | |     |     `-UnaryOperator 0x7fc479005920 <col:38, col:39> 'int' postfix '--'
|     | |     |       `-DeclRefExpr 0x7fc4790058f8 <col:38> 'int' lvalue Var 0x7fc479004eb0 'j' 'int'
|     | |     `-<<<NULL>>>
|     | |-CallExpr 0x7fc479005bf0 <line:35:9, col:29> 'void'
|     | | |-ImplicitCastExpr 0x7fc479005bd8 <col:9> 'void (*)(int, int, int *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x7fc479005ad8 <col:9> 'void (int, int, int *)' Function 0x7fc479004d70 'quicksort' 'void (int, int, int *)'
|     | | |-ImplicitCastExpr 0x7fc479005c30 <col:19> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fc479005b00 <col:19> 'int' lvalue ParmVar 0x7fc479004b40 'first' 'int'
|     | | |-ImplicitCastExpr 0x7fc479005c48 <col:26> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fc479005b28 <col:26> 'int' lvalue Var 0x7fc479004eb0 'j' 'int'
|     | | `-ImplicitCastExpr 0x7fc479005c60 <col:28> 'int *':'int *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fc479005b50 <col:28> 'int *':'int *' lvalue ParmVar 0x7fc479004c40 'x' 'int *':'int *'
|     | `-CallExpr 0x7fc479005d30 <line:36:9, col:29> 'void'
|     |   |-ImplicitCastExpr 0x7fc479005d18 <col:9> 'void (*)(int, int, int *)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x7fc479005c78 <col:9> 'void (int, int, int *)' Function 0x7fc479004d70 'quicksort' 'void (int, int, int *)'
|     |   |-ImplicitCastExpr 0x7fc479005d70 <col:19> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fc479005ca0 <col:19> 'int' lvalue Var 0x7fc479004e38 'i' 'int'
|     |   |-ImplicitCastExpr 0x7fc479005d88 <col:22> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fc479005cc8 <col:22> 'int' lvalue ParmVar 0x7fc479004bb8 'last' 'int'
|     |   `-ImplicitCastExpr 0x7fc479005da0 <col:28> 'int *':'int *' <LValueToRValue>
|     |     `-DeclRefExpr 0x7fc479005cf0 <col:28> 'int *':'int *' lvalue ParmVar 0x7fc479004c40 'x' 'int *':'int *'
|     `-<<<NULL>>>
|-FunctionDecl 0x7fc479005ea8 <line:42:1, line:49:1> line:42:6 main 'void ()'
| `-CompoundStmt 0x7fc479006938 <col:12, line:49:1>
|   |-DeclStmt 0x7fc4790060d0 <line:43:5, col:20>
|   | |-VarDecl 0x7fc479005fc0 <col:5, col:13> col:9 used x 'int [10]'
|   | `-VarDecl 0x7fc479006038 <col:5, col:18> col:16 used n 'int' cinit
|   |   `-IntegerLiteral 0x7fc479006098 <col:18> 'int' 10
|   |-ForStmt 0x7fc479006648 <line:44:5, line:46:5>
|   | |-DeclStmt 0x7fc479006180 <line:44:9, col:16>
|   | | `-VarDecl 0x7fc479006100 <col:9, col:15> col:13 used i 'int' cinit
|   | |   `-IntegerLiteral 0x7fc479006160 <col:15> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fc479006218 <col:17, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fc4790061e8 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fc479006198 <col:17> 'int' lvalue Var 0x7fc479006100 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fc479006200 <col:19> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fc4790061c0 <col:19> 'int' lvalue Var 0x7fc479006038 'n' 'int'
|   | |-UnaryOperator 0x7fc479006268 <col:21, col:22> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fc479006240 <col:21> 'int' lvalue Var 0x7fc479006100 'i' 'int'
|   | `-CompoundStmt 0x7fc479006628 <col:25, line:46:5>
|   |   `-CallExpr 0x7fc4790065c0 <line:45:9, col:25> 'int'
|   |     |-ImplicitCastExpr 0x7fc4790065a8 <col:9> 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fc479006420 <col:9> 'int (const char *__restrict, ...)' Function 0x7fc4790062c8 'scanf' 'int (const char *__restrict, ...)'
|   |     |-ImplicitCastExpr 0x7fc479006610 <col:15> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x7fc4790065f8 <col:15> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x7fc479006488 <col:15> 'char [3]' lvalue "%d"
|   |     `-UnaryOperator 0x7fc479006560 <col:20, col:24> 'int *' prefix '&'
|   |       `-ArraySubscriptExpr 0x7fc479006538 <col:21, col:24> 'int' lvalue
|   |         |-ImplicitCastExpr 0x7fc479006508 <col:21> 'int *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x7fc4790064b8 <col:21> 'int [10]' lvalue Var 0x7fc479005fc0 'x' 'int [10]'
|   |         `-ImplicitCastExpr 0x7fc479006520 <col:23> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fc4790064e0 <col:23> 'int' lvalue Var 0x7fc479006100 'i' 'int'
|   |-CallExpr 0x7fc479006790 <line:47:5, col:22> 'void'
|   | |-ImplicitCastExpr 0x7fc479006778 <col:5> 'void (*)(int, int, int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fc479006680 <col:5> 'void (int, int, int *)' Function 0x7fc479004d70 'quicksort' 'void (int, int, int *)'
|   | |-IntegerLiteral 0x7fc4790066a8 <col:15> 'int' 0
|   | |-BinaryOperator 0x7fc479006728 <col:17, col:19> 'int' '-'
|   | | |-ImplicitCastExpr 0x7fc479006710 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fc4790066c8 <col:17> 'int' lvalue Var 0x7fc479006038 'n' 'int'
|   | | `-IntegerLiteral 0x7fc4790066f0 <col:19> 'int' 1
|   | `-ImplicitCastExpr 0x7fc4790067d0 <col:21> 'int *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x7fc479006750 <col:21> 'int [10]' lvalue Var 0x7fc479005fc0 'x' 'int [10]'
|   `-CallExpr 0x7fc4790068d0 <line:48:5, col:13> 'void'
|     |-ImplicitCastExpr 0x7fc4790068b8 <col:5> 'void (*)(int, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fc4790067e8 <col:5> 'void (int, int *)' Function 0x7fc479002b70 'disp' 'void (int, int *)'
|     |-ImplicitCastExpr 0x7fc479006908 <col:10> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fc479006810 <col:10> 'int' lvalue Var 0x7fc479006038 'n' 'int'
|     `-ImplicitCastExpr 0x7fc479006920 <col:12> 'int *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x7fc479006838 <col:12> 'int [10]' lvalue Var 0x7fc479005fc0 'x' 'int [10]'
`-FunctionDecl 0x7fc4790062c8 <line:45:9> col:9 implicit used scanf 'int (const char *__restrict, ...)' extern
  |-ParmVarDecl 0x7fc479006360 <<invalid sloc>> <invalid sloc> 'const char *__restrict'
  `-FormatAttr 0x7fc4790063c8 <col:9> Implicit scanf 1 2
