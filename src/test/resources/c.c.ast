TranslationUnitDecl 0x7fcfd3816cd0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fcfd3817220 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fcfd3816f40 '__int128'
|-TypedefDecl 0x7fcfd3817290 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fcfd3816f60 'unsigned __int128'
|-TypedefDecl 0x7fcfd3817568 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fcfd3817370 'struct __NSConstantString_tag'
|   `-Record 0x7fcfd38172e8 '__NSConstantString_tag'
|-TypedefDecl 0x7fcfd3817600 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fcfd38175c0 'char *'
|   `-BuiltinType 0x7fcfd3816d60 'char'
|-TypedefDecl 0x7fcfd38178c8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fcfd3817870 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fcfd38176e0 'struct __va_list_tag'
|     `-Record 0x7fcfd3817658 '__va_list_tag'
|-FunctionDecl 0x7fcfd3864b70 <c.c:3:1, line:12:1> line:3:6 disp 'void (int, int *)'
| |-ParmVarDecl 0x7fcfd3817938 <col:11, col:15> col:15 used n 'int'
| |-ParmVarDecl 0x7fcfd3864a60 <col:18, col:24> col:22 used x 'int *':'int *'
| `-CompoundStmt 0x7fcfd3865528 <line:4:1, line:12:1>
|   |-DeclStmt 0x7fcfd3864cd0 <line:5:5, col:10>
|   | `-VarDecl 0x7fcfd3864c70 <col:5, col:9> col:9 used i 'int'
|   |-ForStmt 0x7fcfd3865420 <line:6:5, line:10:5>
|   | |-BinaryOperator 0x7fcfd3864d30 <line:6:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fcfd3864ce8 <col:9> 'int' lvalue Var 0x7fcfd3864c70 'i' 'int'
|   | | `-IntegerLiteral 0x7fcfd3864d10 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fcfd3864dd8 <col:13, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fcfd3864da8 <col:13> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fcfd3864d58 <col:13> 'int' lvalue Var 0x7fcfd3864c70 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fcfd3864dc0 <col:15> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fcfd3864d80 <col:15> 'int' lvalue ParmVar 0x7fcfd3817938 'n' 'int'
|   | |-UnaryOperator 0x7fcfd3864e28 <col:17, col:18> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fcfd3864e00 <col:17> 'int' lvalue ParmVar 0x7fcfd3817938 'n' 'int'
|   | `-CompoundStmt 0x7fcfd38653f8 <col:21, line:10:5>
|   |   |-CallExpr 0x7fcfd3865160 <line:7:9, col:27> 'int'
|   |   | |-ImplicitCastExpr 0x7fcfd3865148 <col:9> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fcfd3864fe0 <col:9> 'int (const char *, ...)' Function 0x7fcfd3864e88 'printf' 'int (const char *, ...)'
|   |   | |-ImplicitCastExpr 0x7fcfd38651b0 <col:16> 'const char *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x7fcfd3865198 <col:16> 'char *' <ArrayToPointerDecay>
|   |   | |   `-StringLiteral 0x7fcfd3865048 <col:16> 'char [4]' lvalue "%d "
|   |   | `-ImplicitCastExpr 0x7fcfd38651c8 <col:23, col:26> 'int' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x7fcfd38650f8 <col:23, col:26> 'int' lvalue
|   |   |     |-ImplicitCastExpr 0x7fcfd38650c8 <col:23> 'int *':'int *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fcfd3865078 <col:23> 'int *':'int *' lvalue ParmVar 0x7fcfd3864a60 'x' 'int *':'int *'
|   |   |     `-ImplicitCastExpr 0x7fcfd38650e0 <col:25> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fcfd38650a0 <col:25> 'int' lvalue Var 0x7fcfd3864c70 'i' 'int'
|   |   `-IfStmt 0x7fcfd38653c0 <line:8:9, line:9:24>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fcfd3865288 <line:8:12, col:18> 'int' '=='
|   |     | |-BinaryOperator 0x7fcfd3865240 <col:12, col:14> 'int' '%'
|   |     | | |-ImplicitCastExpr 0x7fcfd3865228 <col:12> 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x7fcfd38651e0 <col:12> 'int' lvalue Var 0x7fcfd3864c70 'i' 'int'
|   |     | | `-IntegerLiteral 0x7fcfd3865208 <col:14> 'int' 10
|   |     | `-IntegerLiteral 0x7fcfd3865268 <col:18> 'int' 9
|   |     |-CallExpr 0x7fcfd3865360 <line:9:13, col:24> 'int'
|   |     | |-ImplicitCastExpr 0x7fcfd3865348 <col:13> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x7fcfd38652b0 <col:13> 'int (const char *, ...)' Function 0x7fcfd3864e88 'printf' 'int (const char *, ...)'
|   |     | `-ImplicitCastExpr 0x7fcfd38653a8 <col:20> 'const char *' <BitCast>
|   |     |   `-ImplicitCastExpr 0x7fcfd3865390 <col:20> 'char *' <ArrayToPointerDecay>
|   |     |     `-StringLiteral 0x7fcfd3865318 <col:20> 'char [2]' lvalue "\n"
|   |     `-<<<NULL>>>
|   `-CallExpr 0x7fcfd38654c8 <line:11:5, col:16> 'int'
|     |-ImplicitCastExpr 0x7fcfd38654b0 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fcfd3865458 <col:5> 'int (const char *, ...)' Function 0x7fcfd3864e88 'printf' 'int (const char *, ...)'
|     `-ImplicitCastExpr 0x7fcfd3865510 <col:12> 'const char *' <BitCast>
|       `-ImplicitCastExpr 0x7fcfd38654f8 <col:12> 'char *' <ArrayToPointerDecay>
|         `-StringLiteral 0x7fcfd3865480 <col:12> 'char [2]' lvalue "\n"
|-FunctionDecl 0x7fcfd3864e88 <line:7:9> col:9 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x7fcfd3864f20 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x7fcfd3864f88 <col:9> Implicit printf 1 2
|-FunctionDecl 0x7fcfd38655a8 <line:15:1, line:42:1> line:15:6 main 'void ()'
| `-CompoundStmt 0x7fcfd3868960 <col:12, line:42:1>
|   |-DeclStmt 0x7fcfd38659d0 <line:16:5, col:33>
|   | |-VarDecl 0x7fcfd38656c0 <col:5, col:13> col:9 used x 'int [10]'
|   | |-VarDecl 0x7fcfd3865738 <col:5, col:18> col:16 used n 'int' cinit
|   | | `-IntegerLiteral 0x7fcfd3865798 <col:18> 'int' 10
|   | |-VarDecl 0x7fcfd38657d0 <col:5, col:22> col:22 used i 'int'
|   | |-VarDecl 0x7fcfd3865848 <col:5, col:25> col:25 used j 'int'
|   | |-VarDecl 0x7fcfd38658c0 <col:5, col:28> col:28 used k 'int'
|   | `-VarDecl 0x7fcfd3865938 <col:5, col:31> col:31 used wk 'int'
|   |-ForStmt 0x7fcfd3866f18 <line:17:5, line:19:5>
|   | |-BinaryOperator 0x7fcfd3866a48 <line:17:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fcfd3866a00 <col:9> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   | | `-IntegerLiteral 0x7fcfd3866a28 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fcfd3866af0 <col:13, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fcfd3866ac0 <col:13> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fcfd3866a70 <col:13> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fcfd3866ad8 <col:15> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fcfd3866a98 <col:15> 'int' lvalue Var 0x7fcfd3865738 'n' 'int'
|   | |-UnaryOperator 0x7fcfd3866b40 <col:17, col:18> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fcfd3866b18 <col:17> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   | `-CompoundStmt 0x7fcfd3866ef8 <col:21, line:19:5>
|   |   `-CallExpr 0x7fcfd3866e90 <line:18:9, col:25> 'int'
|   |     |-ImplicitCastExpr 0x7fcfd3866e78 <col:9> 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fcfd3866cf0 <col:9> 'int (const char *__restrict, ...)' Function 0x7fcfd3866b98 'scanf' 'int (const char *__restrict, ...)'
|   |     |-ImplicitCastExpr 0x7fcfd3866ee0 <col:15> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x7fcfd3866ec8 <col:15> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x7fcfd3866d58 <col:15> 'char [3]' lvalue "%d"
|   |     `-UnaryOperator 0x7fcfd3866e30 <col:20, col:24> 'int *' prefix '&'
|   |       `-ArraySubscriptExpr 0x7fcfd3866e08 <col:21, col:24> 'int' lvalue
|   |         |-ImplicitCastExpr 0x7fcfd3866dd8 <col:21> 'int *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x7fcfd3866d88 <col:21> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |         `-ImplicitCastExpr 0x7fcfd3866df0 <col:23> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fcfd3866db0 <col:23> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |-ForStmt 0x7fcfd3868328 <line:20:5, line:35:5>
|   | |-BinaryOperator 0x7fcfd3867098 <line:20:9, col:17> 'int' ','
|   | | |-BinaryOperator 0x7fcfd3866f98 <col:9, col:11> 'int' '='
|   | | | |-DeclRefExpr 0x7fcfd3866f50 <col:9> 'int' lvalue Var 0x7fcfd3865848 'j' 'int'
|   | | | `-IntegerLiteral 0x7fcfd3866f78 <col:11> 'int' 0
|   | | `-BinaryOperator 0x7fcfd3867070 <col:13, col:17> 'int' '='
|   | |   |-DeclRefExpr 0x7fcfd3866fc0 <col:13> 'int' lvalue Var 0x7fcfd38658c0 'k' 'int'
|   | |   `-BinaryOperator 0x7fcfd3867048 <col:15, col:17> 'int' '-'
|   | |     |-ImplicitCastExpr 0x7fcfd3867030 <col:15> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fcfd3866fe8 <col:15> 'int' lvalue Var 0x7fcfd3865738 'n' 'int'
|   | |     `-IntegerLiteral 0x7fcfd3867010 <col:17> 'int' 2
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fcfd3867140 <col:19, col:22> 'int' '<='
|   | | |-ImplicitCastExpr 0x7fcfd3867110 <col:19> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fcfd38670c0 <col:19> 'int' lvalue Var 0x7fcfd3865848 'j' 'int'
|   | | `-ImplicitCastExpr 0x7fcfd3867128 <col:22> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fcfd38670e8 <col:22> 'int' lvalue Var 0x7fcfd38658c0 'k' 'int'
|   | |-BinaryOperator 0x7fcfd38671f8 <col:24, col:29> 'int' ','
|   | | |-UnaryOperator 0x7fcfd3867190 <col:24, col:25> 'int' postfix '++'
|   | | | `-DeclRefExpr 0x7fcfd3867168 <col:24> 'int' lvalue Var 0x7fcfd3865848 'j' 'int'
|   | | `-UnaryOperator 0x7fcfd38671d8 <col:28, col:29> 'int' postfix '--'
|   | |   `-DeclRefExpr 0x7fcfd38671b0 <col:28> 'int' lvalue Var 0x7fcfd38658c0 'k' 'int'
|   | `-CompoundStmt 0x7fcfd3868300 <col:32, line:35:5>
|   |   |-ForStmt 0x7fcfd3867a58 <line:21:9, line:27:9>
|   |   | |-BinaryOperator 0x7fcfd3867288 <line:21:13, col:15> 'int' '='
|   |   | | |-DeclRefExpr 0x7fcfd3867220 <col:13> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   | | `-ImplicitCastExpr 0x7fcfd3867270 <col:15> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fcfd3867248 <col:15> 'int' lvalue Var 0x7fcfd3865848 'j' 'int'
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fcfd3867330 <col:17, col:20> 'int' '<='
|   |   | | |-ImplicitCastExpr 0x7fcfd3867300 <col:17> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fcfd38672b0 <col:17> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   | | `-ImplicitCastExpr 0x7fcfd3867318 <col:20> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fcfd38672d8 <col:20> 'int' lvalue Var 0x7fcfd38658c0 'k' 'int'
|   |   | |-UnaryOperator 0x7fcfd3867380 <col:22, col:23> 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x7fcfd3867358 <col:22> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   | `-CompoundStmt 0x7fcfd3867a38 <col:26, line:27:9>
|   |   |   `-IfStmt 0x7fcfd3867a00 <line:22:13, line:26:13>
|   |   |     |-<<<NULL>>>
|   |   |     |-<<<NULL>>>
|   |   |     |-BinaryOperator 0x7fcfd3867568 <line:22:16, col:26> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x7fcfd3867538 <col:16, col:19> 'int' <LValueToRValue>
|   |   |     | | `-ArraySubscriptExpr 0x7fcfd3867420 <col:16, col:19> 'int' lvalue
|   |   |     | |   |-ImplicitCastExpr 0x7fcfd38673f0 <col:16> 'int *' <ArrayToPointerDecay>
|   |   |     | |   | `-DeclRefExpr 0x7fcfd38673a0 <col:16> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |   |     | |   `-ImplicitCastExpr 0x7fcfd3867408 <col:18> 'int' <LValueToRValue>
|   |   |     | |     `-DeclRefExpr 0x7fcfd38673c8 <col:18> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   |     | `-ImplicitCastExpr 0x7fcfd3867550 <col:21, col:26> 'int' <LValueToRValue>
|   |   |     |   `-ArraySubscriptExpr 0x7fcfd3867510 <col:21, col:26> 'int' lvalue
|   |   |     |     |-ImplicitCastExpr 0x7fcfd38674f8 <col:21> 'int *' <ArrayToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x7fcfd3867448 <col:21> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |   |     |     `-BinaryOperator 0x7fcfd38674d0 <col:23, col:25> 'int' '+'
|   |   |     |       |-ImplicitCastExpr 0x7fcfd38674b8 <col:23> 'int' <LValueToRValue>
|   |   |     |       | `-DeclRefExpr 0x7fcfd3867470 <col:23> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   |     |       `-IntegerLiteral 0x7fcfd3867498 <col:25> 'int' 1
|   |   |     |-CompoundStmt 0x7fcfd38679d0 <col:28, line:26:13>
|   |   |     | |-BinaryOperator 0x7fcfd3867678 <line:23:17, col:25> 'int' '='
|   |   |     | | |-DeclRefExpr 0x7fcfd3867590 <col:17> 'int' lvalue Var 0x7fcfd3865938 'wk' 'int'
|   |   |     | | `-ImplicitCastExpr 0x7fcfd3867660 <col:22, col:25> 'int' <LValueToRValue>
|   |   |     | |   `-ArraySubscriptExpr 0x7fcfd3867638 <col:22, col:25> 'int' lvalue
|   |   |     | |     |-ImplicitCastExpr 0x7fcfd3867608 <col:22> 'int *' <ArrayToPointerDecay>
|   |   |     | |     | `-DeclRefExpr 0x7fcfd38675b8 <col:22> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |   |     | |     `-ImplicitCastExpr 0x7fcfd3867620 <col:24> 'int' <LValueToRValue>
|   |   |     | |       `-DeclRefExpr 0x7fcfd38675e0 <col:24> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   |     | |-BinaryOperator 0x7fcfd3867850 <line:24:17, col:29> 'int' '='
|   |   |     | | |-ArraySubscriptExpr 0x7fcfd3867720 <col:17, col:20> 'int' lvalue
|   |   |     | | | |-ImplicitCastExpr 0x7fcfd38676f0 <col:17> 'int *' <ArrayToPointerDecay>
|   |   |     | | | | `-DeclRefExpr 0x7fcfd38676a0 <col:17> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |   |     | | | `-ImplicitCastExpr 0x7fcfd3867708 <col:19> 'int' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fcfd38676c8 <col:19> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   |     | | `-ImplicitCastExpr 0x7fcfd3867838 <col:24, col:29> 'int' <LValueToRValue>
|   |   |     | |   `-ArraySubscriptExpr 0x7fcfd3867810 <col:24, col:29> 'int' lvalue
|   |   |     | |     |-ImplicitCastExpr 0x7fcfd38677f8 <col:24> 'int *' <ArrayToPointerDecay>
|   |   |     | |     | `-DeclRefExpr 0x7fcfd3867748 <col:24> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |   |     | |     `-BinaryOperator 0x7fcfd38677d0 <col:26, col:28> 'int' '+'
|   |   |     | |       |-ImplicitCastExpr 0x7fcfd38677b8 <col:26> 'int' <LValueToRValue>
|   |   |     | |       | `-DeclRefExpr 0x7fcfd3867770 <col:26> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   |     | |       `-IntegerLiteral 0x7fcfd3867798 <col:28> 'int' 1
|   |   |     | `-BinaryOperator 0x7fcfd38679a8 <line:25:17, col:26> 'int' '='
|   |   |     |   |-ArraySubscriptExpr 0x7fcfd3867940 <col:17, col:22> 'int' lvalue
|   |   |     |   | |-ImplicitCastExpr 0x7fcfd3867928 <col:17> 'int *' <ArrayToPointerDecay>
|   |   |     |   | | `-DeclRefExpr 0x7fcfd3867878 <col:17> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |   |     |   | `-BinaryOperator 0x7fcfd3867900 <col:19, col:21> 'int' '+'
|   |   |     |   |   |-ImplicitCastExpr 0x7fcfd38678e8 <col:19> 'int' <LValueToRValue>
|   |   |     |   |   | `-DeclRefExpr 0x7fcfd38678a0 <col:19> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   |     |   |   `-IntegerLiteral 0x7fcfd38678c8 <col:21> 'int' 1
|   |   |     |   `-ImplicitCastExpr 0x7fcfd3867990 <col:26> 'int' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x7fcfd3867968 <col:26> 'int' lvalue Var 0x7fcfd3865938 'wk' 'int'
|   |   |     `-<<<NULL>>>
|   |   `-ForStmt 0x7fcfd38682c8 <line:28:9, line:34:9>
|   |     |-BinaryOperator 0x7fcfd3867af8 <line:28:13, col:15> 'int' '='
|   |     | |-DeclRefExpr 0x7fcfd3867a90 <col:13> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |     | `-ImplicitCastExpr 0x7fcfd3867ae0 <col:15> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fcfd3867ab8 <col:15> 'int' lvalue Var 0x7fcfd38658c0 'k' 'int'
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fcfd3867ba0 <col:17, col:19> 'int' '>'
|   |     | |-ImplicitCastExpr 0x7fcfd3867b70 <col:17> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fcfd3867b20 <col:17> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |     | `-ImplicitCastExpr 0x7fcfd3867b88 <col:19> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fcfd3867b48 <col:19> 'int' lvalue Var 0x7fcfd3865848 'j' 'int'
|   |     |-UnaryOperator 0x7fcfd3867bf0 <col:21, col:22> 'int' postfix '--'
|   |     | `-DeclRefExpr 0x7fcfd3867bc8 <col:21> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |     `-CompoundStmt 0x7fcfd38682a8 <col:25, line:34:9>
|   |       `-IfStmt 0x7fcfd3868270 <line:29:13, line:33:13>
|   |         |-<<<NULL>>>
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x7fcfd3867dd8 <line:29:16, col:26> 'int' '<'
|   |         | |-ImplicitCastExpr 0x7fcfd3867da8 <col:16, col:19> 'int' <LValueToRValue>
|   |         | | `-ArraySubscriptExpr 0x7fcfd3867c90 <col:16, col:19> 'int' lvalue
|   |         | |   |-ImplicitCastExpr 0x7fcfd3867c60 <col:16> 'int *' <ArrayToPointerDecay>
|   |         | |   | `-DeclRefExpr 0x7fcfd3867c10 <col:16> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |         | |   `-ImplicitCastExpr 0x7fcfd3867c78 <col:18> 'int' <LValueToRValue>
|   |         | |     `-DeclRefExpr 0x7fcfd3867c38 <col:18> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |         | `-ImplicitCastExpr 0x7fcfd3867dc0 <col:21, col:26> 'int' <LValueToRValue>
|   |         |   `-ArraySubscriptExpr 0x7fcfd3867d80 <col:21, col:26> 'int' lvalue
|   |         |     |-ImplicitCastExpr 0x7fcfd3867d68 <col:21> 'int *' <ArrayToPointerDecay>
|   |         |     | `-DeclRefExpr 0x7fcfd3867cb8 <col:21> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |         |     `-BinaryOperator 0x7fcfd3867d40 <col:23, col:25> 'int' '-'
|   |         |       |-ImplicitCastExpr 0x7fcfd3867d28 <col:23> 'int' <LValueToRValue>
|   |         |       | `-DeclRefExpr 0x7fcfd3867ce0 <col:23> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |         |       `-IntegerLiteral 0x7fcfd3867d08 <col:25> 'int' 1
|   |         |-CompoundStmt 0x7fcfd3868240 <col:28, line:33:13>
|   |         | |-BinaryOperator 0x7fcfd3867ee8 <line:30:17, col:25> 'int' '='
|   |         | | |-DeclRefExpr 0x7fcfd3867e00 <col:17> 'int' lvalue Var 0x7fcfd3865938 'wk' 'int'
|   |         | | `-ImplicitCastExpr 0x7fcfd3867ed0 <col:22, col:25> 'int' <LValueToRValue>
|   |         | |   `-ArraySubscriptExpr 0x7fcfd3867ea8 <col:22, col:25> 'int' lvalue
|   |         | |     |-ImplicitCastExpr 0x7fcfd3867e78 <col:22> 'int *' <ArrayToPointerDecay>
|   |         | |     | `-DeclRefExpr 0x7fcfd3867e28 <col:22> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |         | |     `-ImplicitCastExpr 0x7fcfd3867e90 <col:24> 'int' <LValueToRValue>
|   |         | |       `-DeclRefExpr 0x7fcfd3867e50 <col:24> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |         | |-BinaryOperator 0x7fcfd38680c0 <line:31:17, col:29> 'int' '='
|   |         | | |-ArraySubscriptExpr 0x7fcfd3867f90 <col:17, col:20> 'int' lvalue
|   |         | | | |-ImplicitCastExpr 0x7fcfd3867f60 <col:17> 'int *' <ArrayToPointerDecay>
|   |         | | | | `-DeclRefExpr 0x7fcfd3867f10 <col:17> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |         | | | `-ImplicitCastExpr 0x7fcfd3867f78 <col:19> 'int' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x7fcfd3867f38 <col:19> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |         | | `-ImplicitCastExpr 0x7fcfd38680a8 <col:24, col:29> 'int' <LValueToRValue>
|   |         | |   `-ArraySubscriptExpr 0x7fcfd3868080 <col:24, col:29> 'int' lvalue
|   |         | |     |-ImplicitCastExpr 0x7fcfd3868068 <col:24> 'int *' <ArrayToPointerDecay>
|   |         | |     | `-DeclRefExpr 0x7fcfd3867fb8 <col:24> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |         | |     `-BinaryOperator 0x7fcfd3868040 <col:26, col:28> 'int' '-'
|   |         | |       |-ImplicitCastExpr 0x7fcfd3868028 <col:26> 'int' <LValueToRValue>
|   |         | |       | `-DeclRefExpr 0x7fcfd3867fe0 <col:26> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |         | |       `-IntegerLiteral 0x7fcfd3868008 <col:28> 'int' 1
|   |         | `-BinaryOperator 0x7fcfd3868218 <line:32:17, col:26> 'int' '='
|   |         |   |-ArraySubscriptExpr 0x7fcfd38681b0 <col:17, col:22> 'int' lvalue
|   |         |   | |-ImplicitCastExpr 0x7fcfd3868198 <col:17> 'int *' <ArrayToPointerDecay>
|   |         |   | | `-DeclRefExpr 0x7fcfd38680e8 <col:17> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |         |   | `-BinaryOperator 0x7fcfd3868170 <col:19, col:21> 'int' '-'
|   |         |   |   |-ImplicitCastExpr 0x7fcfd3868158 <col:19> 'int' <LValueToRValue>
|   |         |   |   | `-DeclRefExpr 0x7fcfd3868110 <col:19> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |         |   |   `-IntegerLiteral 0x7fcfd3868138 <col:21> 'int' 1
|   |         |   `-ImplicitCastExpr 0x7fcfd3868200 <col:26> 'int' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x7fcfd38681d8 <col:26> 'int' lvalue Var 0x7fcfd3865938 'wk' 'int'
|   |         `-<<<NULL>>>
|   |-ForStmt 0x7fcfd3868858 <line:36:5, line:40:5>
|   | |-BinaryOperator 0x7fcfd38683a8 <line:36:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fcfd3868360 <col:9> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   | | `-IntegerLiteral 0x7fcfd3868388 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fcfd3868450 <col:13, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fcfd3868420 <col:13> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fcfd38683d0 <col:13> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fcfd3868438 <col:15> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fcfd38683f8 <col:15> 'int' lvalue Var 0x7fcfd3865738 'n' 'int'
|   | |-UnaryOperator 0x7fcfd38684a0 <col:17, col:18> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fcfd3868478 <col:17> 'int' lvalue Var 0x7fcfd3865738 'n' 'int'
|   | `-CompoundStmt 0x7fcfd3868830 <col:21, line:40:5>
|   |   |-CallExpr 0x7fcfd38685d8 <line:37:9, col:27> 'int'
|   |   | |-ImplicitCastExpr 0x7fcfd38685c0 <col:9> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fcfd38684c0 <col:9> 'int (const char *, ...)' Function 0x7fcfd3864e88 'printf' 'int (const char *, ...)'
|   |   | |-ImplicitCastExpr 0x7fcfd3868628 <col:16> 'const char *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x7fcfd3868610 <col:16> 'char *' <ArrayToPointerDecay>
|   |   | |   `-StringLiteral 0x7fcfd38684e8 <col:16> 'char [4]' lvalue "%d "
|   |   | `-ImplicitCastExpr 0x7fcfd3868640 <col:23, col:26> 'int' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x7fcfd3868598 <col:23, col:26> 'int' lvalue
|   |   |     |-ImplicitCastExpr 0x7fcfd3868568 <col:23> 'int *' <ArrayToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fcfd3868518 <col:23> 'int [10]' lvalue Var 0x7fcfd38656c0 'x' 'int [10]'
|   |   |     `-ImplicitCastExpr 0x7fcfd3868580 <col:25> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fcfd3868540 <col:25> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |   `-IfStmt 0x7fcfd38687f8 <line:38:9, line:39:24>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fcfd3868700 <line:38:12, col:18> 'int' '=='
|   |     | |-BinaryOperator 0x7fcfd38686b8 <col:12, col:14> 'int' '%'
|   |     | | |-ImplicitCastExpr 0x7fcfd38686a0 <col:12> 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x7fcfd3868658 <col:12> 'int' lvalue Var 0x7fcfd38657d0 'i' 'int'
|   |     | | `-IntegerLiteral 0x7fcfd3868680 <col:14> 'int' 10
|   |     | `-IntegerLiteral 0x7fcfd38686e0 <col:18> 'int' 9
|   |     |-CallExpr 0x7fcfd3868798 <line:39:13, col:24> 'int'
|   |     | |-ImplicitCastExpr 0x7fcfd3868780 <col:13> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x7fcfd3868728 <col:13> 'int (const char *, ...)' Function 0x7fcfd3864e88 'printf' 'int (const char *, ...)'
|   |     | `-ImplicitCastExpr 0x7fcfd38687e0 <col:20> 'const char *' <BitCast>
|   |     |   `-ImplicitCastExpr 0x7fcfd38687c8 <col:20> 'char *' <ArrayToPointerDecay>
|   |     |     `-StringLiteral 0x7fcfd3868750 <col:20> 'char [2]' lvalue "\n"
|   |     `-<<<NULL>>>
|   `-CallExpr 0x7fcfd3868900 <line:41:5, col:16> 'int'
|     |-ImplicitCastExpr 0x7fcfd38688e8 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fcfd3868890 <col:5> 'int (const char *, ...)' Function 0x7fcfd3864e88 'printf' 'int (const char *, ...)'
|     `-ImplicitCastExpr 0x7fcfd3868948 <col:12> 'const char *' <BitCast>
|       `-ImplicitCastExpr 0x7fcfd3868930 <col:12> 'char *' <ArrayToPointerDecay>
|         `-StringLiteral 0x7fcfd38688b8 <col:12> 'char [2]' lvalue "\n"
`-FunctionDecl 0x7fcfd3866b98 <line:18:9> col:9 implicit used scanf 'int (const char *__restrict, ...)' extern
  |-ParmVarDecl 0x7fcfd3866c30 <<invalid sloc>> <invalid sloc> 'const char *__restrict'
  `-FormatAttr 0x7fcfd3866c98 <col:9> Implicit scanf 1 2
