TranslationUnitDecl 0x7fafe50244d0 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fafe5024a20 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fafe5024740 '__int128'
|-TypedefDecl 0x7fafe5024a90 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fafe5024760 'unsigned __int128'
|-TypedefDecl 0x7fafe5024d68 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fafe5024b70 'struct __NSConstantString_tag'
|   `-Record 0x7fafe5024ae8 '__NSConstantString_tag'
|-TypedefDecl 0x7fafe5024e00 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fafe5024dc0 'char *'
|   `-BuiltinType 0x7fafe5024560 'char'
|-TypedefDecl 0x7fafe50250c8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fafe5025070 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fafe5024ee0 'struct __va_list_tag'
|     `-Record 0x7fafe5024e58 '__va_list_tag'
|-FunctionDecl 0x7fafe5072370 <a.c:3:1, line:12:1> line:3:6 used disp 'void (int, int *)'
| |-ParmVarDecl 0x7fafe5025138 <col:11, col:15> col:15 used n 'int'
| |-ParmVarDecl 0x7fafe5072260 <col:18, col:24> col:22 used x 'int *':'int *'
| `-CompoundStmt 0x7fafe5072d28 <line:4:1, line:12:1>
|   |-DeclStmt 0x7fafe50724d0 <line:5:5, col:10>
|   | `-VarDecl 0x7fafe5072470 <col:5, col:9> col:9 used i 'int'
|   |-ForStmt 0x7fafe5072c20 <line:6:5, line:10:5>
|   | |-BinaryOperator 0x7fafe5072530 <line:6:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fafe50724e8 <col:9> 'int' lvalue Var 0x7fafe5072470 'i' 'int'
|   | | `-IntegerLiteral 0x7fafe5072510 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fafe50725d8 <col:13, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fafe50725a8 <col:13> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fafe5072558 <col:13> 'int' lvalue Var 0x7fafe5072470 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fafe50725c0 <col:15> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fafe5072580 <col:15> 'int' lvalue ParmVar 0x7fafe5025138 'n' 'int'
|   | |-UnaryOperator 0x7fafe5072628 <col:17, col:18> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fafe5072600 <col:17> 'int' lvalue ParmVar 0x7fafe5025138 'n' 'int'
|   | `-CompoundStmt 0x7fafe5072bf8 <col:21, line:10:5>
|   |   |-CallExpr 0x7fafe5072960 <line:7:9, col:28> 'int'
|   |   | |-ImplicitCastExpr 0x7fafe5072948 <col:9> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fafe50727e0 <col:9> 'int (const char *, ...)' Function 0x7fafe5072688 'printf' 'int (const char *, ...)'
|   |   | |-ImplicitCastExpr 0x7fafe50729b0 <col:16> 'const char *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x7fafe5072998 <col:16> 'char *' <ArrayToPointerDecay>
|   |   | |   `-StringLiteral 0x7fafe5072848 <col:16> 'char [5]' lvalue "%d w"
|   |   | `-ImplicitCastExpr 0x7fafe50729c8 <col:24, col:27> 'int' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x7fafe50728f8 <col:24, col:27> 'int' lvalue
|   |   |     |-ImplicitCastExpr 0x7fafe50728c8 <col:24> 'int *':'int *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fafe5072878 <col:24> 'int *':'int *' lvalue ParmVar 0x7fafe5072260 'x' 'int *':'int *'
|   |   |     `-ImplicitCastExpr 0x7fafe50728e0 <col:26> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fafe50728a0 <col:26> 'int' lvalue Var 0x7fafe5072470 'i' 'int'
|   |   `-IfStmt 0x7fafe5072bc0 <line:8:9, line:9:24>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fafe5072a88 <line:8:12, col:18> 'int' '=='
|   |     | |-BinaryOperator 0x7fafe5072a40 <col:12, col:14> 'int' '%'
|   |     | | |-ImplicitCastExpr 0x7fafe5072a28 <col:12> 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x7fafe50729e0 <col:12> 'int' lvalue Var 0x7fafe5072470 'i' 'int'
|   |     | | `-IntegerLiteral 0x7fafe5072a08 <col:14> 'int' 10
|   |     | `-IntegerLiteral 0x7fafe5072a68 <col:18> 'int' 9
|   |     |-CallExpr 0x7fafe5072b60 <line:9:13, col:24> 'int'
|   |     | |-ImplicitCastExpr 0x7fafe5072b48 <col:13> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x7fafe5072ab0 <col:13> 'int (const char *, ...)' Function 0x7fafe5072688 'printf' 'int (const char *, ...)'
|   |     | `-ImplicitCastExpr 0x7fafe5072ba8 <col:20> 'const char *' <BitCast>
|   |     |   `-ImplicitCastExpr 0x7fafe5072b90 <col:20> 'char *' <ArrayToPointerDecay>
|   |     |     `-StringLiteral 0x7fafe5072b18 <col:20> 'char [2]' lvalue "\n"
|   |     `-<<<NULL>>>
|   `-CallExpr 0x7fafe5072cc8 <line:11:5, col:16> 'int'
|     |-ImplicitCastExpr 0x7fafe5072cb0 <col:5> 'int (*)(const char *, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fafe5072c58 <col:5> 'int (const char *, ...)' Function 0x7fafe5072688 'printf' 'int (const char *, ...)'
|     `-ImplicitCastExpr 0x7fafe5072d10 <col:12> 'const char *' <BitCast>
|       `-ImplicitCastExpr 0x7fafe5072cf8 <col:12> 'char *' <ArrayToPointerDecay>
|         `-StringLiteral 0x7fafe5072c80 <col:12> 'char [2]' lvalue "\n"
|-FunctionDecl 0x7fafe5072688 <line:7:9> col:9 implicit used printf 'int (const char *, ...)' extern
| |-ParmVarDecl 0x7fafe5072720 <<invalid sloc>> <invalid sloc> 'const char *'
| `-FormatAttr 0x7fafe5072788 <col:9> Implicit printf 1 2
|-FunctionDecl 0x7fafe5072ec0 <line:14:1, line:21:1> line:14:6 used swap 'void (int *, int *)'
| |-ParmVarDecl 0x7fafe5072d70 <col:11, col:16> col:16 used x 'int *'
| |-ParmVarDecl 0x7fafe5072de8 <col:19, col:24> col:24 used y 'int *'
| `-CompoundStmt 0x7fafe5074330 <line:15:1, line:21:1>
|   |-DeclStmt 0x7fafe5072fe0 <line:16:5, col:11>
|   | `-VarDecl 0x7fafe5072f80 <col:5, col:9> col:9 used wk 'int'
|   |-BinaryOperator 0x7fafe5073098 <line:17:5, col:9> 'int' '='
|   | |-DeclRefExpr 0x7fafe5072ff8 <col:5> 'int' lvalue Var 0x7fafe5072f80 'wk' 'int'
|   | `-ImplicitCastExpr 0x7fafe5073080 <col:8, col:9> 'int' <LValueToRValue>
|   |   `-UnaryOperator 0x7fafe5073060 <col:8, col:9> 'int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fafe5073048 <col:9> 'int *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fafe5073020 <col:9> 'int *' lvalue ParmVar 0x7fafe5072d70 'x' 'int *'
|   |-BinaryOperator 0x7fafe5073198 <line:18:5, col:9> 'int' '='
|   | |-UnaryOperator 0x7fafe5073100 <col:5, col:6> 'int' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fafe50730e8 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fafe50730c0 <col:6> 'int *' lvalue ParmVar 0x7fafe5072d70 'x' 'int *'
|   | `-ImplicitCastExpr 0x7fafe5073180 <col:8, col:9> 'int' <LValueToRValue>
|   |   `-UnaryOperator 0x7fafe5073160 <col:8, col:9> 'int' lvalue prefix '*'
|   |     `-ImplicitCastExpr 0x7fafe5073148 <col:9> 'int *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fafe5073120 <col:9> 'int *' lvalue ParmVar 0x7fafe5072de8 'y' 'int *'
|   |-BinaryOperator 0x7fafe5074260 <line:19:5, col:8> 'int' '='
|   | |-UnaryOperator 0x7fafe5074200 <col:5, col:6> 'int' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fafe50731e8 <col:6> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fafe50731c0 <col:6> 'int *' lvalue ParmVar 0x7fafe5072de8 'y' 'int *'
|   | `-ImplicitCastExpr 0x7fafe5074248 <col:8> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fafe5074220 <col:8> 'int' lvalue Var 0x7fafe5072f80 'wk' 'int'
|   `-BinaryOperator 0x7fafe5074308 <line:20:5, col:10> 'int' '='
|     |-UnaryOperator 0x7fafe50742c8 <col:5, col:6> 'int' lvalue prefix '*'
|     | `-ImplicitCastExpr 0x7fafe50742b0 <col:6> 'int *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fafe5074288 <col:6> 'int *' lvalue ParmVar 0x7fafe5072d70 'x' 'int *'
|     `-IntegerLiteral 0x7fafe50742e8 <col:10> 'int' 0
|-FunctionDecl 0x7fafe50745c0 <line:23:1, line:36:1> line:23:6 used quicksort 'void (int, int, int *)'
| |-ParmVarDecl 0x7fafe5074388 <col:16, col:20> col:20 used first 'int'
| |-ParmVarDecl 0x7fafe5074400 <col:27, col:31> col:31 used last 'int'
| |-ParmVarDecl 0x7fafe5074488 <col:37, col:43> col:41 used x 'int *':'int *'
| `-CompoundStmt 0x7fafe5075370 <line:24:1, line:36:1>
|   |-DeclStmt 0x7fafe50747f8 <line:25:5, col:20>
|   | |-VarDecl 0x7fafe5074688 <col:5, col:9> col:9 used i 'int'
|   | |-VarDecl 0x7fafe5074700 <col:5, col:12> col:12 used j 'int'
|   | `-VarDecl 0x7fafe5074778 <col:5, col:15> col:15 used pivot 'int'
|   `-IfStmt 0x7fafe5075338 <line:26:5, line:35:5>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fafe5074890 <line:26:8, col:14> 'int' '<'
|     | |-ImplicitCastExpr 0x7fafe5074860 <col:8> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fafe5074810 <col:8> 'int' lvalue ParmVar 0x7fafe5074388 'first' 'int'
|     | `-ImplicitCastExpr 0x7fafe5074878 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fafe5074838 <col:14> 'int' lvalue ParmVar 0x7fafe5074400 'last' 'int'
|     |-CompoundStmt 0x7fafe5075300 <col:19, line:35:5>
|     | |-BinaryOperator 0x7fafe5074a70 <line:27:9, col:31> 'int' '='
|     | | |-DeclRefExpr 0x7fafe50748b8 <col:9> 'int' lvalue Var 0x7fafe5074778 'pivot' 'int'
|     | | `-ImplicitCastExpr 0x7fafe5074a58 <col:15, col:31> 'int' <LValueToRValue>
|     | |   `-ArraySubscriptExpr 0x7fafe5074a30 <col:15, col:31> 'int' lvalue
|     | |     |-ImplicitCastExpr 0x7fafe5074a18 <col:15> 'int *':'int *' <LValueToRValue>
|     | |     | `-DeclRefExpr 0x7fafe50748e0 <col:15> 'int *':'int *' lvalue ParmVar 0x7fafe5074488 'x' 'int *':'int *'
|     | |     `-BinaryOperator 0x7fafe50749f0 <col:17, col:30> 'int' '/'
|     | |       |-ParenExpr 0x7fafe50749b0 <col:17, col:28> 'int'
|     | |       | `-BinaryOperator 0x7fafe5074988 <col:18, col:24> 'int' '+'
|     | |       |   |-ImplicitCastExpr 0x7fafe5074958 <col:18> 'int' <LValueToRValue>
|     | |       |   | `-DeclRefExpr 0x7fafe5074908 <col:18> 'int' lvalue ParmVar 0x7fafe5074388 'first' 'int'
|     | |       |   `-ImplicitCastExpr 0x7fafe5074970 <col:24> 'int' <LValueToRValue>
|     | |       |     `-DeclRefExpr 0x7fafe5074930 <col:24> 'int' lvalue ParmVar 0x7fafe5074400 'last' 'int'
|     | |       `-IntegerLiteral 0x7fafe50749d0 <col:30> 'int' 2
|     | |-BinaryOperator 0x7fafe5074b00 <line:28:9, col:11> 'int' '='
|     | | |-DeclRefExpr 0x7fafe5074a98 <col:9> 'int' lvalue Var 0x7fafe5074688 'i' 'int'
|     | | `-ImplicitCastExpr 0x7fafe5074ae8 <col:11> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fafe5074ac0 <col:11> 'int' lvalue ParmVar 0x7fafe5074388 'first' 'int'
|     | |-BinaryOperator 0x7fafe5074b90 <line:29:9, col:11> 'int' '='
|     | | |-DeclRefExpr 0x7fafe5074b28 <col:9> 'int' lvalue Var 0x7fafe5074700 'j' 'int'
|     | | `-ImplicitCastExpr 0x7fafe5074b78 <col:11> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fafe5074b50 <col:11> 'int' lvalue ParmVar 0x7fafe5074400 'last' 'int'
|     | `-WhileStmt 0x7fafe50752e0 <line:30:9, line:34:9>
|     |   |-<<<NULL>>>
|     |   |-BinaryOperator 0x7fafe5074c38 <line:30:15, col:18> 'int' '<='
|     |   | |-ImplicitCastExpr 0x7fafe5074c08 <col:15> 'int' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x7fafe5074bb8 <col:15> 'int' lvalue Var 0x7fafe5074688 'i' 'int'
|     |   | `-ImplicitCastExpr 0x7fafe5074c20 <col:18> 'int' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x7fafe5074be0 <col:18> 'int' lvalue Var 0x7fafe5074700 'j' 'int'
|     |   `-CompoundStmt 0x7fafe50752b0 <col:20, line:34:9>
|     |     |-WhileStmt 0x7fafe5074dd0 <line:31:13, col:32>
|     |     | |-<<<NULL>>>
|     |     | |-BinaryOperator 0x7fafe5074d60 <col:19, col:24> 'int' '<'
|     |     | | |-ImplicitCastExpr 0x7fafe5074d30 <col:19, col:22> 'int' <LValueToRValue>
|     |     | | | `-ArraySubscriptExpr 0x7fafe5074ce0 <col:19, col:22> 'int' lvalue
|     |     | | |   |-ImplicitCastExpr 0x7fafe5074cb0 <col:19> 'int *':'int *' <LValueToRValue>
|     |     | | |   | `-DeclRefExpr 0x7fafe5074c60 <col:19> 'int *':'int *' lvalue ParmVar 0x7fafe5074488 'x' 'int *':'int *'
|     |     | | |   `-ImplicitCastExpr 0x7fafe5074cc8 <col:21> 'int' <LValueToRValue>
|     |     | | |     `-DeclRefExpr 0x7fafe5074c88 <col:21> 'int' lvalue Var 0x7fafe5074688 'i' 'int'
|     |     | | `-ImplicitCastExpr 0x7fafe5074d48 <col:24> 'int' <LValueToRValue>
|     |     | |   `-DeclRefExpr 0x7fafe5074d08 <col:24> 'int' lvalue Var 0x7fafe5074778 'pivot' 'int'
|     |     | `-UnaryOperator 0x7fafe5074db0 <col:31, col:32> 'int' postfix '++'
|     |     |   `-DeclRefExpr 0x7fafe5074d88 <col:31> 'int' lvalue Var 0x7fafe5074688 'i' 'int'
|     |     |-WhileStmt 0x7fafe5074f60 <line:32:13, col:32>
|     |     | |-<<<NULL>>>
|     |     | |-BinaryOperator 0x7fafe5074ef0 <col:19, col:24> 'int' '>'
|     |     | | |-ImplicitCastExpr 0x7fafe5074ec0 <col:19, col:22> 'int' <LValueToRValue>
|     |     | | | `-ArraySubscriptExpr 0x7fafe5074e70 <col:19, col:22> 'int' lvalue
|     |     | | |   |-ImplicitCastExpr 0x7fafe5074e40 <col:19> 'int *':'int *' <LValueToRValue>
|     |     | | |   | `-DeclRefExpr 0x7fafe5074df0 <col:19> 'int *':'int *' lvalue ParmVar 0x7fafe5074488 'x' 'int *':'int *'
|     |     | | |   `-ImplicitCastExpr 0x7fafe5074e58 <col:21> 'int' <LValueToRValue>
|     |     | | |     `-DeclRefExpr 0x7fafe5074e18 <col:21> 'int' lvalue Var 0x7fafe5074700 'j' 'int'
|     |     | | `-ImplicitCastExpr 0x7fafe5074ed8 <col:24> 'int' <LValueToRValue>
|     |     | |   `-DeclRefExpr 0x7fafe5074e98 <col:24> 'int' lvalue Var 0x7fafe5074778 'pivot' 'int'
|     |     | `-UnaryOperator 0x7fafe5074f40 <col:31, col:32> 'int' postfix '--'
|     |     |   `-DeclRefExpr 0x7fafe5074f18 <col:31> 'int' lvalue Var 0x7fafe5074700 'j' 'int'
|     |     `-IfStmt 0x7fafe5075278 <line:33:13, col:42>
|     |       |-<<<NULL>>>
|     |       |-<<<NULL>>>
|     |       |-BinaryOperator 0x7fafe5075000 <col:16, col:19> 'int' '<='
|     |       | |-ImplicitCastExpr 0x7fafe5074fd0 <col:16> 'int' <LValueToRValue>
|     |       | | `-DeclRefExpr 0x7fafe5074f80 <col:16> 'int' lvalue Var 0x7fafe5074688 'i' 'int'
|     |       | `-ImplicitCastExpr 0x7fafe5074fe8 <col:19> 'int' <LValueToRValue>
|     |       |   `-DeclRefExpr 0x7fafe5074fa8 <col:19> 'int' lvalue Var 0x7fafe5074700 'j' 'int'
|     |       |-CallExpr 0x7fafe5075240 <col:22, col:42> 'void'
|     |       | |-ImplicitCastExpr 0x7fafe5075228 <col:22> 'void (*)(int *, int *)' <FunctionToPointerDecay>
|     |       | | `-DeclRefExpr 0x7fafe5075028 <col:22> 'void (int *, int *)' Function 0x7fafe5072ec0 'swap' 'void (int *, int *)'
|     |       | |-UnaryOperator 0x7fafe5075100 <col:27, col:33> 'int *' prefix '&'
|     |       | | `-ArraySubscriptExpr 0x7fafe50750d8 <col:28, col:33> 'int' lvalue
|     |       | |   |-ImplicitCastExpr 0x7fafe50750c0 <col:28> 'int *':'int *' <LValueToRValue>
|     |       | |   | `-DeclRefExpr 0x7fafe5075050 <col:28> 'int *':'int *' lvalue ParmVar 0x7fafe5074488 'x' 'int *':'int *'
|     |       | |   `-UnaryOperator 0x7fafe50750a0 <col:30, col:31> 'int' postfix '++'
|     |       | |     `-DeclRefExpr 0x7fafe5075078 <col:30> 'int' lvalue Var 0x7fafe5074688 'i' 'int'
|     |       | `-UnaryOperator 0x7fafe50751d0 <col:35, col:41> 'int *' prefix '&'
|     |       |   `-ArraySubscriptExpr 0x7fafe50751a8 <col:36, col:41> 'int' lvalue
|     |       |     |-ImplicitCastExpr 0x7fafe5075190 <col:36> 'int *':'int *' <LValueToRValue>
|     |       |     | `-DeclRefExpr 0x7fafe5075120 <col:36> 'int *':'int *' lvalue ParmVar 0x7fafe5074488 'x' 'int *':'int *'
|     |       |     `-UnaryOperator 0x7fafe5075170 <col:38, col:39> 'int' postfix '--'
|     |       |       `-DeclRefExpr 0x7fafe5075148 <col:38> 'int' lvalue Var 0x7fafe5074700 'j' 'int'
|     |       `-<<<NULL>>>
|     `-<<<NULL>>>
|-FunctionDecl 0x7fafe50753e8 <line:38:1, line:45:1> line:38:6 main 'void ()'
| `-CompoundStmt 0x7fafe5075ed8 <col:12, line:45:1>
|   |-DeclStmt 0x7fafe5075610 <line:39:5, col:20>
|   | |-VarDecl 0x7fafe5075500 <col:5, col:13> col:9 used x 'int [10]'
|   | `-VarDecl 0x7fafe5075578 <col:5, col:18> col:16 used n 'int' cinit
|   |   `-IntegerLiteral 0x7fafe50755d8 <col:18> 'int' 10
|   |-ForStmt 0x7fafe5075b88 <line:40:5, line:42:5>
|   | |-DeclStmt 0x7fafe50756c0 <line:40:9, col:16>
|   | | `-VarDecl 0x7fafe5075640 <col:9, col:15> col:13 used i 'int' cinit
|   | |   `-IntegerLiteral 0x7fafe50756a0 <col:15> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fafe5075758 <col:17, col:19> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fafe5075728 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fafe50756d8 <col:17> 'int' lvalue Var 0x7fafe5075640 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fafe5075740 <col:19> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fafe5075700 <col:19> 'int' lvalue Var 0x7fafe5075578 'n' 'int'
|   | |-UnaryOperator 0x7fafe50757a8 <col:21, col:22> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fafe5075780 <col:21> 'int' lvalue Var 0x7fafe5075640 'i' 'int'
|   | `-CompoundStmt 0x7fafe5075b68 <col:25, line:42:5>
|   |   `-CallExpr 0x7fafe5075b00 <line:41:13, col:29> 'int'
|   |     |-ImplicitCastExpr 0x7fafe5075ae8 <col:13> 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fafe5075960 <col:13> 'int (const char *__restrict, ...)' Function 0x7fafe5075808 'scanf' 'int (const char *__restrict, ...)'
|   |     |-ImplicitCastExpr 0x7fafe5075b50 <col:19> 'const char *' <BitCast>
|   |     | `-ImplicitCastExpr 0x7fafe5075b38 <col:19> 'char *' <ArrayToPointerDecay>
|   |     |   `-StringLiteral 0x7fafe50759c8 <col:19> 'char [3]' lvalue "%d"
|   |     `-UnaryOperator 0x7fafe5075aa0 <col:24, col:28> 'int *' prefix '&'
|   |       `-ArraySubscriptExpr 0x7fafe5075a78 <col:25, col:28> 'int' lvalue
|   |         |-ImplicitCastExpr 0x7fafe5075a48 <col:25> 'int *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x7fafe50759f8 <col:25> 'int [10]' lvalue Var 0x7fafe5075500 'x' 'int [10]'
|   |         `-ImplicitCastExpr 0x7fafe5075a60 <col:27> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fafe5075a20 <col:27> 'int' lvalue Var 0x7fafe5075640 'i' 'int'
|   |-CallExpr 0x7fafe5075d30 <line:43:5, col:22> 'void'
|   | |-ImplicitCastExpr 0x7fafe5075d18 <col:5> 'void (*)(int, int, int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fafe5075bc0 <col:5> 'void (int, int, int *)' Function 0x7fafe50745c0 'quicksort' 'void (int, int, int *)'
|   | |-IntegerLiteral 0x7fafe5075be8 <col:15> 'int' 0
|   | |-BinaryOperator 0x7fafe5075c68 <col:17, col:19> 'int' '-'
|   | | |-ImplicitCastExpr 0x7fafe5075c50 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fafe5075c08 <col:17> 'int' lvalue Var 0x7fafe5075578 'n' 'int'
|   | | `-IntegerLiteral 0x7fafe5075c30 <col:19> 'int' 1
|   | `-ImplicitCastExpr 0x7fafe5075d70 <col:21> 'int *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x7fafe5075c90 <col:21> 'int [10]' lvalue Var 0x7fafe5075500 'x' 'int [10]'
|   `-CallExpr 0x7fafe5075e70 <line:44:5, col:13> 'void'
|     |-ImplicitCastExpr 0x7fafe5075e58 <col:5> 'void (*)(int, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fafe5075d88 <col:5> 'void (int, int *)' Function 0x7fafe5072370 'disp' 'void (int, int *)'
|     |-ImplicitCastExpr 0x7fafe5075ea8 <col:10> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fafe5075db0 <col:10> 'int' lvalue Var 0x7fafe5075578 'n' 'int'
|     `-ImplicitCastExpr 0x7fafe5075ec0 <col:12> 'int *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x7fafe5075dd8 <col:12> 'int [10]' lvalue Var 0x7fafe5075500 'x' 'int [10]'
`-FunctionDecl 0x7fafe5075808 <line:41:13> col:13 implicit used scanf 'int (const char *__restrict, ...)' extern
  |-ParmVarDecl 0x7fafe50758a0 <<invalid sloc>> <invalid sloc> 'const char *__restrict'
  `-FormatAttr 0x7fafe5075908 <col:13> Implicit scanf 1 2
